crystal_doc_search_index_callback({"repository_name":"github.com/vladfaust/prism","body":"# ![Prism](https://user-images.githubusercontent.com/7955682/40576015-3d691524-60f8-11e8-8b6a-3d17c3bd11e6.png)\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/vladfaust/prism/master.svg?style=flat-square)](https://travis-ci.org/vladfaust/prism)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg?style=flat-square)](https://github.vladfaust.com/prism)\n[![Releases](https://img.shields.io/github/release/vladfaust/prism.svg?style=flat-square)](https://github.com/vladfaust/prism/releases)\n[![Awesome](https://github.com/vladfaust/awesome/blob/badge-flat-alternative/media/badge-flat-alternative.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n\nA lightning-fast and strictly-typed web framework for [Crystal](https://crystal-lang.org).\n\n[![Become Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## Projects using Prism\n\n* [Crystal Jobs](https://crystaljobs.org)\n* [Crystal World](https://github.com/vladfaust/crystalworld)\n* *add yours!*\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  prism:\n    github: vladfaust/prism\n    version: ~> 0.4.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/vladfaust/prism/releases) and change the `version` accordingly.\n\n## Basic example\n\nPlease refer to the API documentation available online at [github.vladfaust.com/prism](https://github.vladfaust.com/prism).\n\n```crystal\nrequire \"prism\"\n\nstruct KnockKnock\n  include Prism::Action\n  include Prism::Action::Params\n\n  params do\n    type who : String\n    type how_many_times : Int32, validate: {lte: 10}\n  end\n\n  def call\n    params[:how_many_times].times do\n      text(\"Knock-knock #{params[:who]}\\n\")\n    end\n  end\nend\n\nrouter = Prism::Router.new do\n  get \"/:who\", KnockKnock\nend\n\nlogger = Logger.new(STDOUT, Logger::DEBUG)\nlog_handler = Prism::LogHandler.new(logger)\nhandlers = [log_handler, router]\n\nserver = Prism::Server.new(handlers, logger)\nserver.bind_tcp(5000)\nserver.listen\n\n#  INFO -- :   Prism::Server is listening on http://127.0.0.1:5000...\n# DEBUG -- :     GET /me 200 177Î¼s\n```\n\n```\ncurl -X GET -d \"howManyTimes=2\" http://127.0.0.1:5000/me\nKnock-knock me\nKnock-knock me\n```\n\n## Websockets example\n\nWe call them *Channels* for convenience.\n\n```crystal\nrequire \"prism\"\n\nclass Notifications\n  include Prism::Channel\n\n  @@subscriptions = Array(self).new\n\n  def self.notify(message)\n    @@subscriptions.each &.socket.send(message)\n  end\n\n  def on_open\n    socket.send(\"Hello\")\n    @@subscriptions.push(self)\n  end\n\n  def on_close\n    @@subscriptions.delete(self)\n  end\nend\n\nrouter = Prism::Router.new do\n  ws \"/notifications\" do |socket, env|\n    Notifications.subscribe(socket, env)\n  end\nend\n\n# Later in the code...\n\nNotifications.notify(\"Something happened!\") # Will notify all subscribers binded to this particular Crystal process\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/vladfaust/prism/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@vladfaust](https://github.com/vladfaust) Vlad Faust - creator, maintainer\n","program":{"html_id":"github.com/vladfaust/prism/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/vladfaust/prism","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/vladfaust/prism/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/vladfaust/prism/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/array/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/array/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param* value which must be an Array itself.\n\nIf the Array type is Union, the type order matters. See `Union.from_param`:\n\n```\nparam = <@value=[\"foo\", 42]>\n\nArray(UInt16 | String).from_param(param) == [\"foo\", 42_u16]\n# but\nArray(String | UInt16).from_param(param) == [\"foo\", \"42\"]\n```","summary":"<p>Initialize from <em>param</em> value which must be an Array itself.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/array/from_param.cr#L13","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/array/from_param.cr#L13","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen self\n  param.value\nwhen Array(String)\n  (param.value.as(Array)).map do |e|\n    T.from_param(Prism::Params::StringParam.new(param.name, e.as(String), param.path))\n  end.as(self)\nwhen JSON::Any\n  begin\n    (param.value.as(JSON::Any)).as_a.map do |e|\n      T.from_param(Prism::Params::JSONParam.new(param.name, e, param.path))\n    end\n  rescue TypeCastError\n    raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\n  end\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Bool","path":"Bool.html","kind":"struct","full_name":"Bool","name":"Bool","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/bool/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/bool/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bool has only two possible values: `true` and `false`. They are constructed using these literals:\n\n```\ntrue  # A Bool that is true\nfalse # A Bool that is false\n```","summary":"<p>Bool has only two possible values: <code>true</code> and <code>false</code>.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param*.\n\nThe param value must be either `true`, `\"true\"`, `false` or `\"false\"`.\n\n```\nBool.from_param(<@value=\"true\">) # => true\n```","summary":"<p>Initialize from <em>param</em>.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/bool/from_param.cr#L9","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/bool/from_param.cr#L9","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen true, \"true\"\n  true\nwhen false, \"false\"\n  false\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, \"Bool\"))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Float","path":"Float.html","kind":"struct","full_name":"Float","name":"Float","abstract":true,"superclass":{"html_id":"github.com/vladfaust/prism/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/float/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/float/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Float is the base type of all floating point numbers.\n\nThere are two floating point types, `Float32` and `Float64`,\nwhich correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)\nand [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)\ntypes defined by IEEE.\n\nA floating point literal is an optional `+` or `-` sign, followed by\na sequence of numbers or underscores, followed by a dot,\nfollowed by numbers or underscores, followed by an optional exponent suffix,\nfollowed by an optional type suffix. If no suffix is present, the literal's type is `Float64`.\n\n```\n1.0     # Float64\n1.0_f32 # Float32\n1_f32   # Float32\n\n1e10   # Float64\n1.5e10 # Float64\n1.5e-7 # Float64\n\n+1.3 # Float64\n-0.5 # Float64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000.111_111 # better than 1000000.111111\n```","summary":"<p>Float is the base type of all floating point numbers.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param* value.\n\n```\nFloat32.from_param(<@value=\"10.1\">) # => 10.1_f32\n```","summary":"<p>Initialize from <em>param</em> value.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/float/from_param.cr#L7","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/float/from_param.cr#L7","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen String\n  {% for n in [\"32\", \"64\"] of ::String %}\n        {% if @type.name == (\"Float\" + n) %}\n          return param.value.as(String).to_f{{ n.id }}\n        {% end %}\n      {% end %}\nwhen Float\n  {% for n in [\"32\", \"64\"] of ::String %}\n        {% if @type.name == (\"Float\" + n) %}\n          return param.value.as(Float).to_f{{ n.id }}\n        {% end %}\n      {% end %}\nwhen JSON::Any\n  begin\n    {% if @type.name == \"Float32\" %}\n          return param.value.as(JSON::Any).as_f32\n        {% else %}{% if @type.name == \"Float64\" %}\n          return param.value.as(JSON::Any).as_f\n        {% end %}{% end %}\n  rescue ex : JSON::ParseException\n    raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\n  end\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"prism/ext/http/request/auth.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr"},{"filename":"prism/ext/http/request/path_params.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/path_params.cr"},{"filename":"prism/ext/http/request/action.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/action.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The HTTP module contains `HTTP::Client`, `HTTP::Server` and `HTTP::WebSocket` implementations.","summary":"<p>The HTTP module contains <code>HTTP::Client</code>, <code>HTTP::Server</code> and <code>HTTP::WebSocket</code> implementations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/HTTP/Request","path":"HTTP/Request.html","kind":"class","full_name":"HTTP::Request","name":"Request","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/http/request/auth.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr"},{"filename":"prism/ext/http/request/path_params.cr","line_number":2,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/path_params.cr"},{"filename":"prism/ext/http/request/action.cr","line_number":5,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/action.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"An HTTP request.\n\nIt serves both to perform requests by an `HTTP::Client` and to\nrepresent requests received by an `HTTP::Server`.\n\nA request always holds an `IO` as a body.\nWhen creating a request with a `String` or `Bytes` its body\nwill be a `IO::Memory` wrapping these, and the `Content-Length`\nheader will be set appropriately.","summary":"<p>An HTTP request.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"action:HTTP::WebSocketHandler|HTTP::Server::Context->Nil|Nil-instance-method","html_id":"action:HTTP::WebSocketHandler|HTTP::Server::Context-&gt;Nil|Nil-instance-method","name":"action","doc":"An action to call in this request. It's automatically injected into `Request` when routing with `Prism::Router`.","summary":"<p>An action to call in this request.</p>","abstract":false,"args":[],"args_string":" : HTTP::WebSocketHandler | HTTP::Server::Context -> Nil | Nil","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/action.cr#L9","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/action.cr#L9","def":{"name":"action","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@action"}},{"id":"auth:Prism::Authenticator?-instance-method","html_id":"auth:Prism::Authenticator?-instance-method","name":"auth","doc":"An object containing auth data. It should be set by the developer. See `Prism::Action::Auth` and `Prism::Channel::Auth`.","summary":"<p>An object containing auth data.</p>","abstract":false,"args":[],"args_string":" : Prism::Authenticator?","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr#L6","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr#L6","def":{"name":"auth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Prism::Authenticator | ::Nil","visibility":"Public","body":"@auth"}},{"id":"auth=(auth:Prism::Authenticator?)-instance-method","html_id":"auth=(auth:Prism::Authenticator?)-instance-method","name":"auth=","doc":"An object containing auth data. It should be set by the developer. See `Prism::Action::Auth` and `Prism::Channel::Auth`.","summary":"<p>An object containing auth data.</p>","abstract":false,"args":[{"name":"auth","doc":null,"default_value":"","external_name":"auth","restriction":"Prism::Authenticator | ::Nil"}],"args_string":"(auth : Prism::Authenticator?)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr#L6","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/auth.cr#L6","def":{"name":"auth=","args":[{"name":"auth","doc":null,"default_value":"","external_name":"auth","restriction":"Prism::Authenticator | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@auth = auth"}},{"id":"path_params:Hash(String,String)?-instance-method","html_id":"path_params:Hash(String,String)?-instance-method","name":"path_params","doc":"A hash containing path params (extracted from the request's path). It's automatically set when routing with `Prism::Router`.\n\nFor example, request with path `\"/user/42/edit\"` routed with `put \"/user/:id/edit\"` will have `{\"id\" => \"42\"}` path params.","summary":"<p>A hash containing path params (extracted from the request's path).</p>","abstract":false,"args":[],"args_string":" : Hash(String, String)?","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/path_params.cr#L7","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/http/request/path_params.cr#L7","def":{"name":"path_params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path_params"}}],"macros":[],"types":[]}]},{"html_id":"github.com/vladfaust/prism/Int","path":"Int.html","kind":"struct","full_name":"Int","name":"Int","abstract":true,"superclass":{"html_id":"github.com/vladfaust/prism/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/int/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/int/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Int is the base type of all integer types.\n\nThere are four signed integer types: `Int8`, `Int16`, `Int32` and `Int64`,\nbeing able to represent numbers of 8, 16, 32 and 64 bits respectively.\nThere are four unsigned integer types: `UInt8`, `UInt16`, `UInt32` and `UInt64`.\n\nAn integer literal is an optional `+` or `-` sign, followed by\na sequence of digits and underscores, optionally followed by a suffix.\nIf no suffix is present, the literal's type is the lowest between `Int32`, `Int64` and `UInt64`\nin which the number fits:\n\n```\n1 # Int32\n\n1_i8  # Int8\n1_i16 # Int16\n1_i32 # Int32\n1_i64 # Int64\n\n1_u8  # UInt8\n1_u16 # UInt16\n1_u32 # UInt32\n1_u64 # UInt64\n\n+10 # Int32\n-20 # Int32\n\n2147483648          # Int64\n9223372036854775808 # UInt64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000 # better than 1000000\n```\n\nBinary numbers start with `0b`:\n\n```\n0b1101 # == 13\n```\n\nOctal numbers start with `0o`:\n\n```\n0o123 # == 83\n```\n\nHexadecimal numbers start with `0x`:\n\n```\n0xFE012D # == 16646445\n0xfe012d # == 16646445\n```","summary":"<p>Int is the base type of all integer types.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param*.\n\n```\nUInt8.from_param(<@value=\"2\">) # => 2_u8\n```","summary":"<p>Initialize from <em>param</em>.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/int/from_param.cr#L7","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/int/from_param.cr#L7","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      case param.value\n      {% for t in [\"String\", \"Int\"] of ::String %}\n        when {{ t.id }}\n          {% for n in [\"8\", \"16\", \"32\", \"64\", \"128\"] of ::String %}\n            {% if @type.name == (\"UInt\" + n) %}\n              return param.value.as({{ t.id }}).to_u{{ n.id }}\n            {% else %}{% if @type.name == (\"Int\" + n) %}\n              return param.value.as({{ t.id }}).to_i{{ n.id }}\n            {% end %}{% end %}\n          {% end %}\n      {% end %}\n      when JSON::Any\n        begin\n          {% found = false %}\n          {% for n in [\"8\", \"16\", \"32\"] of ::String %}\n            {% if @type.name == (\"UInt\" + n) %}\n              {% found = true %}\n              i = param.value.as(JSON::Any).as_i\n              raise Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}) if i < UInt{{ n.id }}::MIN || i > UInt{{ n.id }}::MAX\n              return i.to_u{{ n.id }}\n            {% end %}\n          {% end %}\n          {% if @type.name == \"UInt64\" %}\n            i = param.value.as(JSON::Any).as_i64\n            raise Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}) if i < UInt64::MIN || i > UInt64::MAX\n            return i.to_u64\n          {% else %}{% if @type.name == \"UInt128\" %}\n            i = param.value.as(JSON::Any).as_i64\n            raise Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}) if i < UInt128::MIN || i > UInt128::MAX\n            return i.to_u128\n          {% else %}{% if @type.name == \"Int32\" %}\n            return param.value.as(JSON::Any).as_i\n          {% else %}{% if @type.name == \"Int64\" %}\n            return param.value.as(JSON::Any).as_i64\n          {% else %}{% if !found %}\n            {% raise(\"Unknown Int type #{@type}\") %}\n          {% end %}{% end %}{% end %}{% end %}{% end %}\n        rescue ex : JSON::ParseException\n          raise Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }})\n        end\n      else\n        raise Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }})\n      end\n    {% end %}"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Nil","path":"Nil.html","kind":"struct","full_name":"Nil","name":"Nil","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/nil/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/nil/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The `Nil` type has only one possible value: `nil`.\n\n`nil` is commonly used to represent the absence of a value.\nFor example, `String#index` returns the position of the character or `nil` if it's not\nin the string:\n\n```\nstr = \"Hello world\"\nstr.index 'e' # => 1\nstr.index 'a' # => nil\n```\n\nIn the above example, trying to invoke a method on the returned value will\ngive a compile time error unless both `Int32` and `Nil` define that method:\n\n```\nstr = \"Hello world\"\nidx = str.index 'e'\nidx + 1 # Error: undefined method '+' for Nil\n```\n\nThe language and the standard library provide short, readable, easy ways to deal with `nil`,\nsuch as `Object#try` and `Object#not_nil!`:\n\n```\nstr = \"Hello world\"\n\n# The index of 'e' in str or 0 if not found\nidx1 = str.index('e') || 0\n\nidx2 = str.index('a')\nif idx2\n  # Compiles: idx2 can't be nil here\n  idx2 + 1\nend\n\n# Tell the compiler that we are sure the returned\n# value is not nil: raises a runtime exception\n# if our assumption doesn't hold.\nidx3 = str.index('o').not_nil!\n```","summary":"<p>The <code><a href=\"Nil.html\">Nil</a></code> type has only one possible value: <code>nil</code>.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":null,"summary":null,"abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/nil/from_param.cr#L2","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/nil/from_param.cr#L2","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if param.value == nil\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Null","path":"Null.html","kind":"struct","full_name":"Null","name":"Null","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/null.cr","line_number":24,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A special object stating that the value is not empty but intentionally null.\n\nFor example, params in PATCH action can be `Null` to unset a model's properties:\n\n```\nparams do\n  type email : String | Null?, validate: {regex: /@/} # Validations will be run on String only\nend\n\ndef call\n  case params[:email]\n  when String then user.email = params[:email]\n  when Null   then user.email = nil\n  end\nend\n```\n\nTo mark parameter as a Null, a \"null\" string must be passed, e.g. `\"?email=null\"`. However, when parsing from JSON, explicit `null` fields would be turned into Null, and `\"null\"` would not:\n\n```\n{email: null}   # params[:email] === Null\n{email: \"null\"} # params[:email] === String\n```","summary":"<p>A special object stating that the value is not empty but intentionally null.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param* value.\n\nWill return self instance if current param value equals to `\"null\"` (doesn't work for JSON):\n\n```\nNull.from_param(<@value=\"null\">) # => Null()\nNull.from_param(<@value=42>)     # raise Prism::Params::InvalidParamTypeError\n```","summary":"<p>Initialize from <em>param</em> value.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L33","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L33","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (param.value.is_a?(Null) || (param.value == \"null\")) || (param.value == \"NULL\")\n  return self.new\nend\nraise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\n"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L24","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L24","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"not_nil!-instance-method","html_id":"not_nil!-instance-method","name":"not_nil!","doc":"Raises an exception.\n\nSee also: `Object#not_nil!`.","summary":"<p>Raises an exception.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L41","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/null.cr#L41","def":{"name":"not_nil!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(\"Nil assertion failed (is Null)\")"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism","path":"Prism.html","kind":"module","full_name":"Prism","name":"Prism","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"prism/authenticator.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/authenticator.cr"},{"filename":"prism/auth.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/auth.cr"},{"filename":"prism/action/auth.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/auth.cr"},{"filename":"prism/action/params.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/params.cr"},{"filename":"prism/action.cr","line_number":6,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr"},{"filename":"prism/channel/auth.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/auth.cr"},{"filename":"prism/channel/params.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/params.cr"},{"filename":"prism/channel.cr","line_number":6,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr"},{"filename":"prism/cors.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr"},{"filename":"prism/log_handler.cr","line_number":6,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr"},{"filename":"prism/proc_handler.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/proc_handler.cr"},{"filename":"prism/router.cr","line_number":8,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr"},{"filename":"prism/server.cr","line_number":6,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr"},{"filename":"prism.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Prism is an expressive modular web framework.","summary":"<p>Prism is an expressive modular web framework.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Action","path":"Prism/Action.html","kind":"module","full_name":"Prism::Action","name":"Action","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"locations":[{"filename":"prism/action/auth.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/auth.cr"},{"filename":"prism/action/params.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/params.cr"},{"filename":"prism/action.cr","line_number":27,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"A callable HTTP action with [Callbacks](https://github.com/vladfaust/callbacks.cr) module included.\n\nNOTE: *(From [API](https://crystal-lang.org/api/0.23.1/HTTP/Server/Response.html)) The response #status_code and #headers must be configured before writing the response body. Once response output is written, changing the status and #headers properties has no effect.*\n\n```\nstruct MyAction\n  include Prism::Action\n\n  def call\n    text(\"ok\")\n  end\n\n  after do\n    p \"MyAction: ok\"\n  end\nend\n\nMyAction.call(env)\n# => \"ok\"\n```","summary":"<p>A callable HTTP action with <a href=\"https://github.com/vladfaust/callbacks.cr\" target=\"_blank\">Callbacks</a> module included.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"after-instance-method","html_id":"after-instance-method","name":"after","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","def":{"name":"after","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}},{"id":"around(&block)-instance-method","html_id":"around(&amp;block)-instance-method","name":"around","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","def":{"name":"around","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"yield"}},{"id":"before-instance-method","html_id":"before-instance-method","name":"before","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L28","def":{"name":"before","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}},{"id":"body-instance-method","html_id":"body-instance-method","name":"body","doc":"Lazy string version of request body (read *max_body_size* bytes on the first call).\n\n```\n# Action A\ndef call\n  body                 # => \"foo\"\n  context.request.body # => nil\nend\n\n# Action B\ndef call\n  context.request.body # => Not nil\nend\n```","summary":"<p>Lazy string version of request body (read <em>max_body_size</em> bytes on the first call).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L67","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L67","def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@body || (@body = context.request.body.try(&.gets(limit: self.class.max_body_size)))"}},{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L30","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L30","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":"Current context.","summary":"<p>Current context.</p>","abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L72","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L72","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::HTTP::Server::Context","visibility":"Public","body":"@context"}},{"id":"header(name,value)-instance-method","html_id":"header(name,value)-instance-method","name":"header","doc":"Set HTTP header.\n\n```\ndef call\n  header(\"Content-Type\", \"application/json\")\nend\n```","summary":"<p>Set HTTP header.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(name, value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L131","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L131","def":{"name":"header","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.headers[name] = value"}},{"id":"json(status:Int,value)-instance-method","html_id":"json(status:Int,value)-instance-method","name":"json","doc":"Set the status to *status*, cast *value* to JSON and write it into the response body.\n\"Content-Type\" header is set to `\"\"application/json; charset=utf-8\"\"`.\n\n```\ndef call\n  json(201, {\n    object: object\n  })\nend\n```","summary":"<p>Set the status to <em>status</em>, cast <em>value</em> to JSON and write it into the response body.</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(status : Int, value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L182","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L182","def":{"name":"json","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"status(status)\njson(value)\n"}},{"id":"json(value)-instance-method","html_id":"json(value)-instance-method","name":"json","doc":"Cast *value* to JSON and write it into the response body.\n\"Content-Type\" header is set to `\"\"application/json; charset=utf-8\"\"`.\n\n```\ndef call\n  json(object)\nend\n```","summary":"<p>Cast <em>value</em> to JSON and write it into the response body.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L182","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L182","def":{"name":"json","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"header(\"Content-Type\", CONTENT_TYPE_JSON)\nvalue.to_json(context.response)\ncontext.response.close\n"}},{"id":"redirect(location:String|URI,code=302)-instance-method","html_id":"redirect(location:String|URI,code=302)-instance-method","name":"redirect","doc":"Set response status code to *code* and \"Location\" header to *location*.\n\nDoes **not** interrupt the call.\n\n```\ndef call\n  redirect(\"https://google.com\")\n  puts \"will be called\"\nend\n```","summary":"<p>Set response status code to <em>code</em> and \"Location\" header to <em>location</em>.</p>","abstract":false,"args":[{"name":"location","doc":null,"default_value":"","external_name":"location","restriction":"String | URI"},{"name":"code","doc":null,"default_value":"302","external_name":"code","restriction":""}],"args_string":"(location : String | URI, code = <span class=\"n\">302</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L145","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L145","def":{"name":"redirect","args":[{"name":"location","doc":null,"default_value":"","external_name":"location","restriction":"String | URI"},{"name":"code","doc":null,"default_value":"302","external_name":"code","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"status(code)\nheader(\"Location\", location.to_s)\n"}},{"id":"status(new_statusvalue)-instance-method","html_id":"status(new_statusvalue)-instance-method","name":"status","doc":"Set HTTP status code.\n\n```\ndef call\n  status(400)\nend\n```","summary":"<p>Set HTTP status code.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"new_status","restriction":""}],"args_string":"(new_status value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L120","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L120","def":{"name":"status","args":[{"name":"value","doc":null,"default_value":"","external_name":"new_status","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.status_code = value"}},{"id":"text(status:Int,value)-instance-method","html_id":"text(status:Int,value)-instance-method","name":"text","doc":"Set the status to *status* and write text *value* into the response body.\n\"Content-Type\" header is set to `\"\"text/html; charset=utf-8\"\"`.\n\n```\ndef call\n  text(200, \"ok\")\nend\n```","summary":"<p>Set the status to <em>status</em> and write text <em>value</em> into the response body.</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(status : Int, value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L152","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L152","def":{"name":"text","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"status(status)\ntext(value)\n"}},{"id":"text(value)-instance-method","html_id":"text(value)-instance-method","name":"text","doc":"Write text into the response body.\n\"Content-Type\" header is set to `\"\"text/html; charset=utf-8\"\"`.\n\n```\ndef call\n  text(\"ok\")\nend\n```","summary":"<p>Write text into the response body.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L152","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L152","def":{"name":"text","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"header(\"Content-Type\", CONTENT_TYPE_TEXT)\ncontext.response.print(value)\n"}}],"macros":[{"id":"halt!(status,response=nil)-macro","html_id":"halt!(status,response=nil)-macro","name":"halt!","doc":"Set HTTP *status*, close the response and **stop** the execution.\nOptionally specify *response*, otherwise print a default HTTP response for this *status*.\n\n```\ndef call\n  halt!(403) # Will print \"Unauthorized\" into the response body\n  text(\"ok\") # This line will not be called\nend\n\ndef call\n  halt!(500, \"Something's wrong!\") # Will print \"Something's wrong!\" into the response body\nend\n\ndef call\n  halt!(409, {error: \"Oops\"}) # Will print \"Oops\" and set content type to JSON\nend\n\ndef call\n  halt!(403, PaymentError) # Will call #to_json on PaymentError\nend\n```","summary":"<p>Set HTTP <em>status</em>, close the response and <strong>stop</strong> the execution.</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":""},{"name":"response","doc":null,"default_value":"nil","external_name":"response","restriction":""}],"args_string":"(status, response = nil)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action.cr#L99","def":{"name":"halt!","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":""},{"name":"response","doc":null,"default_value":"nil","external_name":"response","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      status(\n{{ status.id }}\n)\n\n      \n{% if response.is_a?(StringLiteral) || response.is_a?(StringInterpolation) %}\n        text({{ response }})\n      {% else %}{% if response.is_a?(NilLiteral) %}\n        text(HTTP.default_status_message_for({{ status.id }}))\n      {% else %}\n        json({{ response }})\n      {% end %}{% end %}\n\n\n      raise Halt.new\n    \n"}}],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Action/Auth","path":"Prism/Action/Auth.html","kind":"module","full_name":"Prism::Action::Auth(Authenticator)","name":"Auth","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Prism/Auth","kind":"module","full_name":"Prism::Auth","name":"Auth"}],"locations":[{"filename":"prism/action/auth.cr","line_number":25,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/auth.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Prism/Auth","kind":"module","full_name":"Prism::Auth","name":"Auth"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Action","kind":"module","full_name":"Prism::Action","name":"Action"},"doc":"An `Action` module which adds `authenticate` and `authorize` macro, which try to auth* in the before callback.\n\n```\nstruct StrictAction\n  include Prism::Action\n  include Prism::Action::Auth(Authenticator)\n\n  # Would try to call `auth?.try &.authenticate(:user)`\n  # in before callback, `halt!(401)` otherwise\n  authenticate :user\n\n  # Would try to call `auth?.try &.authorize(permissions: {:create_posts})`\n  # in before callback, `halt!(403)` otherwise\n  authorize permissions: {:create_posts}\n\n  def call\n    auth.user # It's guaranteed to be not nil\n  end\nend\n```","summary":"<p>An <code><a href=\"../../Prism/Action.html\">Action</a></code> module which adds <code><a href=\"../../Prism/Action/Auth.html#authenticate%28%2Aargs%2C%2A%2Anargs%29-macro\">authenticate</a></code> and <code><a href=\"../../Prism/Action/Auth.html#authorize%28%2Aargs%2C%2A%2Anargs%29-macro\">authorize</a></code> macro, which try to auth* in the before callback.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"authenticate(*args,**nargs)-macro","html_id":"authenticate(*args,**nargs)-macro","name":"authenticate","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/auth.cr#L28","def":{"name":"authenticate","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"block_arg":null,"visibility":"Public","body":"        before do\n          auth?.try &.authenticate(\n{{ *args }}\n{{ if args.size > 0 && nargs.size > 0\n  \", \".id\nend }}\n{{ **nargs }}\n) || halt!(401)\n        \nend\n      \n"}},{"id":"authorize(*args,**nargs)-macro","html_id":"authorize(*args,**nargs)-macro","name":"authorize","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/auth.cr#L34","def":{"name":"authorize","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"block_arg":null,"visibility":"Public","body":"        before do\n          auth?.try &.authorize(\n{{ *args }}\n{{ if args.size > 0 && nargs.size > 0\n  \", \".id\nend }}\n{{ **nargs }}\n) || halt!(403)\n        \nend\n      \n"}}],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Action/Params","path":"Prism/Action/Params.html","kind":"module","full_name":"Prism::Action::Params","name":"Params","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","kind":"module","full_name":"Prism::Params::Validation","name":"Validation"}],"locations":[{"filename":"prism/action/params.cr","line_number":23,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/params.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Action","kind":"module","full_name":"Prism::Action","name":"Action"},"doc":"Params module for `Prism::Action`. It injects params parsing into `before` callback.\n\nHalts with 422 if `Prism::Params::InvalidParamTypeError`, `Prism::Params::ParamNotFoundError` or `Prism::Params::InvalidParamError` raised.\n\n```\nstruct MyAction\n  include Prism::Action\n  include Prism::Action::Params\n\n  params do\n    type foo : Int32\n  end\n\n  def call\n    params[:foo] # => Int32\n  end\nend\n```","summary":"<p>Params module for <code><a href=\"../../Prism/Action.html\">Prism::Action</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"params-macro","html_id":"params-macro","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/action/params.cr#L61","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        Prism::Params.params do\n          \n{{ yield }}\n\n        \nend\n\n        @params = uninitialized ParamsTuple\n        protected getter params\n\n        before do\n          begin\n            @params = self.class.parse_params(context, self.class.max_body_size, @@preserve_body)\n          rescue \nex : InvalidParamTypeError | ParamNotFoundError | InvalidParamError | ProcError\n            context.response.status_code = 422\n            context.response.print(\nex.message)\n          \nend\n        \nend\n      \n"}}],"types":[]}]},{"html_id":"github.com/vladfaust/prism/Prism/Auth","path":"Prism/Auth.html","kind":"module","full_name":"Prism::Auth(Authenticator)","name":"Auth","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"prism/auth.cr","line_number":41,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/auth.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/vladfaust/prism/Prism/Action/Auth","kind":"module","full_name":"Prism::Action::Auth(Authenticator)","name":"Auth"},{"html_id":"github.com/vladfaust/prism/Prism/Channel/Auth","kind":"module","full_name":"Prism::Channel::Auth(Authenticator)","name":"Auth"}],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"A versatile auth module.\n\n```\nclass Authenticator\n  include Prism::Authenticator\n\n  enum Scope\n    User\n    Admin\n  end\n\n  def user\n    user?.not_nil!\n  end\n\n  def user?\n    @user ||= User.find(&.token.== @token)\n  end\n\n  def initialize(@token : String?)\n  end\nend\n\nstruct MyAction\n  include Prism::Action\n  include Prism::Auth(Authenticator)\n\n  def call\n    # Check if auth object exists in current request before\n    if auth?.try &.user?\n      auth.user # It would return a non-nil User instance\n    else\n      halt!(401)\n    end\n  end\nend\n```","summary":"<p>A versatile auth module.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"auth-macro","html_id":"auth-macro","name":"auth","doc":"Return a non-nil authenticator object contained in the request, otherwise raise. See `HTTP::Request.auth`.","summary":"<p>Return a non-nil authenticator object contained in the request, otherwise raise.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/auth.cr#L43","def":{"name":"auth","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      context.request.auth.not_nil!.as(Authenticator)\n    "}},{"id":"auth?-macro","html_id":"auth?-macro","name":"auth?","doc":"Safe authenticator object check. Returns nil if `context.request.auth` is empty.","summary":"<p>Safe authenticator object check.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/auth.cr#L48","def":{"name":"auth?","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      context.request.auth.try &.as(Authenticator)\n    "}}],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Authenticator","path":"Prism/Authenticator.html","kind":"module","full_name":"Prism::Authenticator","name":"Authenticator","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"prism/authenticator.cr","line_number":22,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/authenticator.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"An abstract auth container.\n\nIt doesn't have any functionality, but marks an including type as eligible for an auth object at `context.request.auth`.\n\nHowever, as seen at `Action::Auth` and `Channel::Auth`, an including type is likely to implement `authenticate` and `authorize` methods.\n\n```\nclass Authenticator\n  include Prism::Authenticator\n\n  getter! user : User?\n\n  def initialize(@token : String?)\n  end\n\n  def authenticate\n    @user ||= User.find(&.token.== @token)\n  end\nend\n```","summary":"<p>An abstract auth container.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Channel","path":"Prism/Channel.html","kind":"module","full_name":"Prism::Channel","name":"Channel","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"locations":[{"filename":"prism/channel/auth.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/auth.cr"},{"filename":"prism/channel/params.cr","line_number":4,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/params.cr"},{"filename":"prism/channel.cr","line_number":54,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"A callable websocket Channel with [Callbacks](https://github.com/vladfaust/callbacks.cr) module included.\n\n```\nclass UserNotifications\n  include Prism::Channel\n  include Prism::Channel::Auth\n  include Prism::Channel::Params\n\n  # Will close the socket if unauthorized\n  auth!\n\n  # Will close the socket on params validation error\n  params do\n    type foo : String?\n  end\n\n  def self.notify(user : User, payload : String)\n    if socket = @@subscriptions[user]?\n      socket.notify(payload)\n    end\n  end\n\n  def on_open\n    @@subscriptions[auth.user] = self\n  end\n\n  def notify(payload : String)\n    socket.send(payload)\n  end\n\n  def on_close\n    @@subscriptions[auth.user] = nil\n  end\nend\n\nrouter = Prism::Router.new do\n  ws \"/notifications\" do |socket, env|\n    UserNotifications.subscribe(socket, env)\n    # Or\n    UserNotifications.call(socket, env)\n  end\nend\n\n# Later in the code\n\nUserNotifications.notify(user, \"You've got a message!\")\n```","summary":"<p>A callable websocket Channel with <a href=\"https://github.com/vladfaust/callbacks.cr\" target=\"_blank\">Callbacks</a> module included.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"after-instance-method","html_id":"after-instance-method","name":"after","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","def":{"name":"after","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}},{"id":"around(&block)-instance-method","html_id":"around(&amp;block)-instance-method","name":"around","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","def":{"name":"around","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"yield"}},{"id":"before-instance-method","html_id":"before-instance-method","name":"before","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L55","def":{"name":"before","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L124","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L124","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::HTTP::Server::Context","visibility":"Public","body":"@context"}},{"id":"on_binary(binary)-instance-method","html_id":"on_binary(binary)-instance-method","name":"on_binary","doc":"Called when the socket receives a binary message from client.","summary":"<p>Called when the socket receives a binary message from client.</p>","abstract":false,"args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"args_string":"(binary)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L66","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L66","def":{"name":"on_binary","args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_close-instance-method","html_id":"on_close-instance-method","name":"on_close","doc":"Called once when the socket closes.","summary":"<p>Called once when the socket closes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L79","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L79","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_message(message)-instance-method","html_id":"on_message(message)-instance-method","name":"on_message","doc":"Called when the socket receives a message from client.","summary":"<p>Called when the socket receives a message from client.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L62","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L62","def":{"name":"on_message","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_open-instance-method","html_id":"on_open-instance-method","name":"on_open","doc":"Called once when a new socket is opened.","summary":"<p>Called once when a new socket is opened.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L58","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L58","def":{"name":"on_open","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_ping-instance-method","html_id":"on_ping-instance-method","name":"on_ping","doc":"Called when the socket receives a PING message from client.","summary":"<p>Called when the socket receives a PING message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L70","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L70","def":{"name":"on_ping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"socket.send(\"PONG\")"}},{"id":"on_pong-instance-method","html_id":"on_pong-instance-method","name":"on_pong","doc":"Called when the socket receives a PONG message from client.","summary":"<p>Called when the socket receives a PONG message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L75","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L75","def":{"name":"on_pong","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"socket:HTTP::WebSocket-instance-method","html_id":"socket:HTTP::WebSocket-instance-method","name":"socket","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::WebSocket","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L125","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L125","def":{"name":"socket","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::WebSocket","visibility":"Public","body":"@socket"}},{"id":"subscribe-instance-method","html_id":"subscribe-instance-method","name":"subscribe","doc":"Call `#on_open` and bind to the `socket`'s events. Read more in [Crystal API docs](https://crystal-lang.org/api/0.23.1/HTTP/WebSocket.html).","summary":"<p>Call <code><a href=\"../Prism/Channel.html#on_open-instance-method\">#on_open</a></code> and bind to the <code><a href=\"../Prism/Channel.html#socket%3AHTTP%3A%3AWebSocket-instance-method\">#socket</a></code>'s events.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L95","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L95","def":{"name":"subscribe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on_open\nsocket.on_message do |message|\n  on_message(message)\nend\nsocket.on_binary do |binary|\n  on_binary(binary)\nend\nsocket.on_ping do\n  on_ping\nend\nsocket.on_pong do\n  on_pong\nend\nsocket.on_close do\n  on_close\nend\n"}},{"id":"subscribe_with_callbacks-instance-method","html_id":"subscribe_with_callbacks-instance-method","name":"subscribe_with_callbacks","doc":"Subscribe to channel with [callbacks](https://github.com/vladfaust/callbacks.cr).","summary":"<p>Subscribe to channel with <a href=\"https://github.com/vladfaust/callbacks.cr\" target=\"_blank\">callbacks</a>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L120","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel.cr#L120","def":{"name":"subscribe_with_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"with_callbacks do\n  subscribe\nend"}}],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Channel/Auth","path":"Prism/Channel/Auth.html","kind":"module","full_name":"Prism::Channel::Auth(Authenticator)","name":"Auth","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Prism/Auth","kind":"module","full_name":"Prism::Auth","name":"Auth"}],"locations":[{"filename":"prism/channel/auth.cr","line_number":25,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/auth.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Prism/Auth","kind":"module","full_name":"Prism::Auth","name":"Auth"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Channel","kind":"module","full_name":"Prism::Channel","name":"Channel"},"doc":"A `Channel` module which adds `authenticate` and `authorize` macro, which try to auth* in the before callback.\n\n```\nclass MyChannel\n  include Prism::Channel\n  include Prism::Channel::Auth(Authenticator)\n\n  # Would try to call `auth?.try &.authenticate(:user)`\n  # in before callback, close socket with \"Unauthenticated\" message otherwise\n  authenticate :user\n\n  # Would try to call `auth?.try &.authorize(permissions: {:create_posts})`\n  # in before callback, close socket with \"Unauthorized\" message otherwise\n  authorize permissions: {:create_posts}\n\n  def on_open\n    auth.user # It's guaranteed to be not nil\n  end\nend\n```","summary":"<p>A <code><a href=\"../../Prism/Channel.html\">Channel</a></code> module which adds <code><a href=\"../../Prism/Channel/Auth.html#authenticate%28%2Aargs%2C%2A%2Anargs%29-macro\">authenticate</a></code> and <code><a href=\"../../Prism/Channel/Auth.html#authorize%28%2Aargs%2C%2A%2Anargs%29-macro\">authorize</a></code> macro, which try to auth* in the before callback.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"authenticate(*args,**nargs)-macro","html_id":"authenticate(*args,**nargs)-macro","name":"authenticate","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/auth.cr#L28","def":{"name":"authenticate","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"block_arg":null,"visibility":"Public","body":"        before do\n          auth?.try &.authenticate(\n{{ *args }}\n{{ if args.size > 0 && nargs.size > 0\n  \", \".id\nend }}\n{{ **nargs }}\n) || (socket.close(\"Unauthenticated\"); false)\n        \nend\n      \n"}},{"id":"authorize(*args,**nargs)-macro","html_id":"authorize(*args,**nargs)-macro","name":"authorize","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/auth.cr#L34","def":{"name":"authorize","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"block_arg":null,"visibility":"Public","body":"        before do\n          auth?.try &.authorize(\n{{ *args }}\n{{ if args.size > 0 && nargs.size > 0\n  \", \".id\nend }}\n{{ **nargs }}\n) || (socket.close(\"Unauthorized\"); false)\n        \nend\n      \n"}}],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Channel/Params","path":"Prism/Channel/Params.html","kind":"module","full_name":"Prism::Channel::Params","name":"Params","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","kind":"module","full_name":"Prism::Params::Validation","name":"Validation"}],"locations":[{"filename":"prism/channel/params.cr","line_number":23,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/params.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Channel","kind":"module","full_name":"Prism::Channel","name":"Channel"},"doc":"Params module for `Prism::Channel`. It injects params parsing into `before` callback.\n\nCloses the socket if `Prism::Params::InvalidParamTypeError`, `Prism::Params::ParamNotFoundError` or `Prism::Params::InvalidParamError` raised.\n\n```\nclass MyChannel\n  include Prism::Channel\n  include Prism::Channel::Params\n\n  params do\n    type foo : Int32\n  end\n\n  def on_open\n    params[:foo] # => Int32\n  end\nend\n```","summary":"<p>Params module for <code><a href=\"../../Prism/Channel.html\">Prism::Channel</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"params-macro","html_id":"params-macro","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/channel/params.cr#L26","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        Prism::Params.params do\n          \n{{ yield }}\n\n        \nend\n\n        @params = uninitialized ParamsTuple\n        protected getter params\n\n        before do\n          begin\n            @params = self.class.parse_params(context)\n            true\n          rescue \nex : InvalidParamTypeError | ParamNotFoundError | InvalidParamError | ProcError\n            socket.close(\nex.message)\n            false\n          \nend\n        \nend\n      \n"}}],"types":[]}]},{"html_id":"github.com/vladfaust/prism/Prism/CORS","path":"Prism/CORS.html","kind":"class","full_name":"Prism::CORS","name":"CORS","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/cors.cr","line_number":11,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"Extracted from [kemalyst](https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr).\n\nSee [CORS on Wiki](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing).\n\n```\ncors = Prism::CORS.new(allow_headers: %w(accept content-type authorization))\n```","summary":"<p>Extracted from <a href=\"https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr\" target=\"_blank\">kemalyst</a>.</p>","class_methods":[],"constructors":[{"id":"new(allow_origin=&quot;*&quot;,allow_headers=[&quot;accept&quot;,&quot;content-type&quot;]of::String,allow_methods=[&quot;GET&quot;,&quot;HEAD&quot;,&quot;POST&quot;,&quot;DELETE&quot;,&quot;OPTIONS&quot;,&quot;PUT&quot;,&quot;PATCH&quot;]of::String,allow_credentials=false,max_age=0)-class-method","html_id":"new(allow_origin=&amp;quot;*&amp;quot;,allow_headers=[&amp;quot;accept&amp;quot;,&amp;quot;content-type&amp;quot;]of::String,allow_methods=[&amp;quot;GET&amp;quot;,&amp;quot;HEAD&amp;quot;,&amp;quot;POST&amp;quot;,&amp;quot;DELETE&amp;quot;,&amp;quot;OPTIONS&amp;quot;,&amp;quot;PUT&amp;quot;,&amp;quot;PATCH&amp;quot;]of::String,allow_credentials=false,max_age=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"args_string":"(allow_origin = <span class=\"s\">&quot;*&quot;</span>, allow_headers = [<span class=\"s\">&quot;accept&quot;</span>, <span class=\"s\">&quot;content-type&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_methods = [<span class=\"s\">&quot;GET&quot;</span>, <span class=\"s\">&quot;HEAD&quot;</span>, <span class=\"s\">&quot;POST&quot;</span>, <span class=\"s\">&quot;DELETE&quot;</span>, <span class=\"s\">&quot;OPTIONS&quot;</span>, <span class=\"s\">&quot;PUT&quot;</span>, <span class=\"s\">&quot;PATCH&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_credentials = <span class=\"n\">false</span>, max_age = <span class=\"n\">0</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr#L14","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr#L14","def":{"name":"new","args":[{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(allow_origin, allow_headers, allow_methods, allow_credentials, max_age)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr#L23","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/cors.cr#L23","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  context.response.headers[\"Access-Control-Allow-Origin\"] = @allow_origin\n  if @allow_credentials\n    context.response.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n  end\n  if @max_age > 0\n    context.response.headers[\"Access-Control-Max-Age\"] = @max_age.to_s\n  end\n  if context.request.method == \"OPTIONS\"\n    context.response.status_code = 200\n    response = \"\"\n    if requested_method = context.request.headers[\"Access-Control-Request-Method\"]\n      if @allow_methods.includes?(requested_method.strip)\n        context.response.headers[\"Access-Control-Allow-Methods\"] = @allow_methods.join(\", \")\n      else\n        context.response.status_code = 403\n        response = \"Method #{requested_method} not allowed.\"\n      end\n    end\n    if requested_headers = context.request.headers[\"Access-Control-Request-Headers\"]\n      (requested_headers.split(\",\")).each do |requested_header|\n        if @allow_headers.includes?(requested_header.strip.downcase)\n          context.response.headers[\"Access-Control-Allow-Headers\"] = @allow_headers.join(\", \")\n        else\n          context.response.status_code = 403\n          response = \"Headers #{requested_headers} not allowed.\"\n        end\n      end\n    end\n    context.response.content_type = \"text/html; charset=utf-8\"\n    context.response.print(response)\n  else\n    call_next(context)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/LogHandler","path":"Prism/LogHandler.html","kind":"class","full_name":"Prism::LogHandler","name":"LogHandler","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/log_handler.cr","line_number":16,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"WS_COLOR","name":"WS_COLOR","value":":cyan","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"`HTTP::Handler` which debugs requests colorfully into specified *logger*.\n\n```\nlogger = Prism::LogHandler.new(Logger.new(STDOUT).tap { |l| l.level = Logger::DEBUG })\n\n#  DEBUG -- :     GET /users 200 102Î¼s\n#  DEBUG -- :     GET /favicon.ico 404 52Î¼s\n#  DEBUG -- :    POST /users 201 3.74ms\n```","summary":"<p><code>HTTP::Handler</code> which debugs requests colorfully into specified <em>logger</em>.</p>","class_methods":[],"constructors":[{"id":"new(logger:Logger)-class-method","html_id":"new(logger:Logger)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"}],"args_string":"(logger : Logger)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr#L21","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr#L21","def":{"name":"new","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(logger)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr#L24","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/log_handler.cr#L24","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @logger.level > Logger::DEBUG\n  return call_next(context)\nelse\n  websocket = context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  if websocket\n    method = ((\"WS\".rjust(7)).colorize(WS_COLOR)).mode(:bold)\n    resource = context.request.resource.colorize(WS_COLOR)\n    progess = \"pending\".colorize(:dark_gray)\n    @logger.debug(\"#{method} #{resource} #{progess}\")\n  end\n  elapsed = Time.measure do\n    call_next(context)\n  end\n  color = :red\n  case context.response.status_code\n  when 100..199\n    color = :cyan\n  when 200..299\n    color = :green\n  when 300..399\n    color = :yellow\n  end\n  method = (((websocket ? \"WS\" : context.request.method).rjust(7)).colorize(color)).mode(:bold)\n  resource = context.request.resource.colorize(color)\n  status_code = (context.response.status_code.colorize(color)).mode(:bold)\n  @logger.debug(\"#{method} #{resource} #{status_code} #{(TimeFormat.auto(elapsed)).colorize(:dark_gray)}\")\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Params","path":"Prism/Params.html","kind":"module","full_name":"Prism::Params","name":"Params","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","kind":"module","full_name":"Prism::Params::Validation","name":"Validation"}],"locations":[{"filename":"prism/params/abstract_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/abstract_param.cr"},{"filename":"prism/params/definition.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/definition.cr"},{"filename":"prism/params/errors.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr"},{"filename":"prism/ext/named_tuple/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/named_tuple/from_param.cr"},{"filename":"prism/params/parsing.cr","line_number":6,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/parsing.cr"},{"filename":"prism/params/validation.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/validation.cr"},{"filename":"prism/params.cr","line_number":79,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_MAX_BODY_SIZE","name":"DEFAULT_MAX_BODY_SIZE","value":"UInt64.new(8 * (1024 ** 2))","doc":"8 MB ought to be enough for anybody.","summary":"<p>8 MB ought to be enough for anybody.</p>"}],"included_modules":[{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","kind":"module","full_name":"Prism::Params::Validation","name":"Validation"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/vladfaust/prism/Prism/Action/Params","kind":"module","full_name":"Prism::Action::Params","name":"Params"},{"html_id":"github.com/vladfaust/prism/Prism/Channel/Params","kind":"module","full_name":"Prism::Channel::Params","name":"Params"}],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"Request params typecasting and validation module.\n\nExtracts params from (nearly) all possible sources and casts them accordingly (invoking `Type.from_param`) into a `NamedTuple`.\n\n```\nclass SimpleAction\n  include Prism::Params\n\n  params do\n    type foo : Int32? # Equivalent of `Int32 | Nil`\n    type name : String | Null, validate: {size: {min: 3}} # Null is different from Nil\n    type the_time : Time? # the_time, the-time and theTime keys are accepted\n    type bar : nilable: true do # Nested params are supported too\n      type baz :do\n        type qux : String?\n        type qax : Array(String)? # Yep, arrays\n      end\n\n      type quux : Int32, proc: (quux : Int32) -> { quux * 2 }\n    end\n  end\n\n  def self.call(context)\n    params = parse_params(context,\n      limit: 1.gb,         # Defaults to 8 MB\n      preserve_body: true, # Defaults to false\n    )\n\n    p params[:foo].class\n    # => Int32?\n\n    p params[:name].class\n    # => String\n\n    p params[:the_time].class\n    # => Time?\n\n    p params[:bar]?.try &.[:baz][:qux].class\n    # => String?\n\n    p params[:bar]?.try &.[:baz][:qax].class\n    # => Array(String)?\n  end\nend\n```\n\nNOTE: Params can be accessed both by `String` and `Symbol` keys.\n\nParams parsing order (latter rewrites previous):\n\n1. Path params (note that when parsing path params, only keys the same as params' names are looked up, e.g. `\"the_time\"`);\n2. Request query params (.e.g \"/?foo=42&theTime=0\");\n3. Multipart form data (only if `\"Content-Type\"` is `\"multipart/form-data\"`);\n4. Body params (only if `\"Content-Type\"` is `\"application/x-www-form-urlencoded\"`);\n5. JSON body (only if `\"Content-Type\"` is `\"application/json\"`).\n\nIf you want to implement your own type casting, extend it with `.from_param` method (see `Int.from_param` for example).\n\n`Prism::Action::Params` and `Prism::Channel::Params` modules can be included to automatically add `parse_params` into `#before` callback:\n\n```\nstruct MyPrismAction\n  include Prism::Action\n  include Prism::Action::Params\n\n  params do\n    type id : Int32\n  end\n\n  def call\n    p params[:id].class # => Int32\n  end\nend\n```","summary":"<p>Request params typecasting and validation module.</p>","class_methods":[{"id":"parse_params(context,limit:UInt64=DEFAULT_MAX_BODY_SIZE)-class-method","html_id":"parse_params(context,limit:UInt64=DEFAULT_MAX_BODY_SIZE)-class-method","name":"parse_params","doc":"Extract then cast and validate params from a body limited to *limit* bytes. Returns `NamedTuple` of params.\n\nCould raise `InvalidParamTypeError`, `InvalidParamError` or `ParamNotFoundError` on failure.","summary":"<p>Extract then cast and validate params from a body limited to <em>limit</em> bytes.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"limit","doc":null,"default_value":"DEFAULT_MAX_BODY_SIZE","external_name":"limit","restriction":"UInt64"}],"args_string":"(context, limit : UInt64 = <span class=\"t\">DEFAULT_MAX_BODY_SIZE</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/parsing.cr#L13","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/parsing.cr#L13","def":{"name":"parse_params","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"limit","doc":null,"default_value":"DEFAULT_MAX_BODY_SIZE","external_name":"limit","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(\"Call #params macro before!\")"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"params-macro","html_id":"params-macro","name":"params","doc":"An **essential** params definition block.","summary":"<p>An <strong>essential</strong> params definition block.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params.cr#L83","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    INTERNAL__PRISM_PARAMS = [] of NamedTuple\n    INTERNAL__PRISM_PARAMS_PARENTS = \n{current_value: [] of Symbol, nilable: \n{} of Array(Symbol) => Bool}\n\n    \n{{ (yield).id }}\n\n\n    define_params_tuple\n    define_param_type\n    define_parse_params\n  \n"}},{"id":"type(declaration,**options)-macro","html_id":"type(declaration,**options)-macro","name":"type","doc":"Define a single param or nested params. Must be called within the `#params` block.\n\nParams must be defined with standard Crystal variable definition syntax, which is underscore (e.g. `array_param`). Upon parsing, *under_score*, *kebab-case* and *lowerCamelcase* keys are considered valid. Thus said, incoming params can include either `\"array_param\"`, `\"array-param\"` or `\"arrayParam\"` key.\n\nNOTE: However, only key the same as the param's name (`\"array_param\"`) is valid when casting from *path params*.\n\nExample:\n\n```\nparams do\n  type user do\n    type email : String, validate: {regex: /@/}\n    type password : String, validate: {size: (0..32)}\n    type age : Int32?\n    type about_me : String? # about_me, about-me and aboutMe keys are looked up upon parsing\n  end\nend\n```\n\n**Nested params** (e.g. `type user do`) can have following options:\n\n- *nilable* (`false` by default, change as `type user, nilable: true do`).\n\n**Single param** has two mandatory arguments:\n\n- *name* declares an access key for the `params` tuple;\n- *type* defines a type which the param must be casted to, otherwise validation will fail (i.e. \"foo\" won't cast to `Int32`). You can declary an arbitary type, union or array (e.g. `Array(UInt16)`), must it respond to `.from_param`. See `Int.from_param` and its siblings for implementations.\n\nNOTE: Union Array type isn't supported, e.g. `type foo : Array(Int32 | String)` is invalid because of uncertainty of how to process it, for example `[\"42\"]` - should `\"42\"` stay String or be casted to Int32?\n\n**Single param** can also have some options:\n\n- *nilable* declares if this param is nilable (the same effect is achieved with nilable *type*, i.e. `Int32?`);\n- *validate* defines validation options. See `Validation`;\n- *proc* will be called each time the param is casted (right after validation). The param becomes the returned value, so this *proc* **must** return the same type.\n\nNOTE: If a param is nilable, but is present and of invalid type, an `InvalidParamTypeError` will be raised.","summary":"<p>Define a single param or nested params.</p>","abstract":false,"args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"args_string":"(declaration, **options)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/definition.cr#L39","def":{"name":"type","args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if block %}\n      {% INTERNAL__PRISM_PARAMS_PARENTS[:current_value].push(declaration.id.stringify)if options[:nilable]\n  INTERNAL__PRISM_PARAMS_PARENTS[:nilable][INTERNAL__PRISM_PARAMS_PARENTS[:current_value].select do |x|\n    x\n  end.map do |__arg0|\n    __arg0.id.stringify\n  end] = options[:nilable]\nend %}\n\n      {{ yield }}\n\n      \\{%\n        current_size = INTERNAL__PRISM_PARAMS_PARENTS[:current_value].select{ |x| x }.size\n        INTERNAL__PRISM_PARAMS_PARENTS[:current_value][current_size - 1] = nil\n        INTERNAL__PRISM_PARAMS_PARENTS[:current_value] = INTERNAL__PRISM_PARAMS_PARENTS[:current_value].select{ |x| x }\n      %}\n    {% else %}\n      {% nilable = if options[:nilable] == nil\n  if declaration.type.is_a?(Union)\n    declaration.type.types.map(&.stringify).includes?(\"::Nil\")\n  else\n    false\n  end\nelse\n  options[:nilable]\nendarray = if declaration.type.is_a?(Union)\n  declaration.type.types.any? do |t|\n    t.stringify == \"Array\"\n  end || ((declaration.type.is_a?(Union) && declaration.type.types.first.is_a?(Generic)) && (declaration.type.types.first.name.stringify == \"Array\"))\nelse\n  if declaration.type.is_a?(Generic)\n    declaration.type.name.stringify == \"Array\"\n  else\n    false\n  end\nendINTERNAL__PRISM_PARAMS.push({parents: INTERNAL__PRISM_PARAMS_PARENTS[:current_value].size > 0 ? INTERNAL__PRISM_PARAMS_PARENTS[:current_value].map do |x|\n  x.id.stringify\nend : nil, name: declaration.var.stringify, keys: [declaration.var.stringify, declaration.var.stringify.underscore, declaration.var.stringify.underscore.gsub(/_/, \"-\"), declaration.var.stringify.camelcase[0...1].downcase + declaration.var.stringify.camelcase[1..-1]].uniq, type: declaration.type, nilable: nilable, validate: options[:validate], proc: options[:proc], array: array}) %}\n    {% end %}\n\n  \n"}}],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Params/InvalidParamError","path":"Prism/Params/InvalidParamError.html","kind":"class","full_name":"Prism::Params::InvalidParamError","name":"InvalidParamError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/params/errors.cr","line_number":35,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGE_TEMPLATE","name":"MESSAGE_TEMPLATE","value":"\"Parameter \\\"%{path}\\\" %{message}\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},"doc":"Raised when a param is invalid.","summary":"<p>Raised when a param is invalid.</p>","class_methods":[],"constructors":[{"id":"new(param:AbstractParam,message:String?=nil)-class-method","html_id":"new(param:AbstractParam,message:String?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(param : AbstractParam, message : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L40","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L40","def":{"name":"new","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L36","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L36","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@message"}},{"id":"param:Prism::Params::AbstractParam-instance-method","html_id":"param:Prism::Params::AbstractParam-instance-method","name":"param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Prism::Params::AbstractParam","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L36","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L36","def":{"name":"param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Params/InvalidParamTypeError","path":"Prism/Params/InvalidParamTypeError.html","kind":"class","full_name":"Prism::Params::InvalidParamTypeError","name":"InvalidParamTypeError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/params/errors.cr","line_number":3,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGE_TEMPLATE","name":"MESSAGE_TEMPLATE","value":"\"Parameter \\\"%{path}\\\" is expected to be %{expected} (given %{given})\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},"doc":"Raised when a param cannot be casted to the desired type.","summary":"<p>Raised when a param cannot be casted to the desired type.</p>","class_methods":[],"constructors":[{"id":"new(param:AbstractParam,expected_type:String)-class-method","html_id":"new(param:AbstractParam,expected_type:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"String"}],"args_string":"(param : AbstractParam, expected_type : String)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L8","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L8","def":{"name":"new","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param, expected_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"expected_type:String-instance-method","html_id":"expected_type:String-instance-method","name":"expected_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L4","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L4","def":{"name":"expected_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expected_type"}},{"id":"param:Prism::Params::AbstractParam-instance-method","html_id":"param:Prism::Params::AbstractParam-instance-method","name":"param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Prism::Params::AbstractParam","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L4","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L4","def":{"name":"param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Params/ParamNotFoundError","path":"Prism/Params/ParamNotFoundError.html","kind":"class","full_name":"Prism::Params::ParamNotFoundError","name":"ParamNotFoundError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/params/errors.cr","line_number":20,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGE_TEMPLATE","name":"MESSAGE_TEMPLATE","value":"\"Parameter \\\"%{path}\\\" is missing\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},"doc":"Raised when a param is not present.","summary":"<p>Raised when a param is not present.</p>","class_methods":[],"constructors":[{"id":"new(param:AbstractParam)-class-method","html_id":"new(param:AbstractParam)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"}],"args_string":"(param : AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L25","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L25","def":{"name":"new","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"param:Prism::Params::AbstractParam-instance-method","html_id":"param:Prism::Params::AbstractParam-instance-method","name":"param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Prism::Params::AbstractParam","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L21","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L21","def":{"name":"param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Params/ProcError","path":"Prism/Params/ProcError.html","kind":"class","full_name":"Prism::Params::ProcError","name":"ProcError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/params/errors.cr","line_number":52,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGE_TEMPLATE","name":"MESSAGE_TEMPLATE","value":"\"Failed to process parameter \\\"%{path}\\\": %{message}\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(param:AbstractParam,message:String?=nil)-class-method","html_id":"new(param:AbstractParam,message:String?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(param : AbstractParam, message : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L57","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L57","def":{"name":"new","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"AbstractParam"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L53","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L53","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@message"}},{"id":"param:Prism::Params::AbstractParam-instance-method","html_id":"param:Prism::Params::AbstractParam-instance-method","name":"param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Prism::Params::AbstractParam","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L53","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/errors.cr#L53","def":{"name":"param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","path":"Prism/Params/Validation.html","kind":"module","full_name":"Prism::Params::Validation","name":"Validation","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"prism/params/validation.cr","line_number":35,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/validation.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"}],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params","kind":"module","full_name":"Prism::Params","name":"Params"},"doc":"A params validation module.\n\nImplemented inline validations (defined as `:validate` option on param):\n\n- *size* (`Range | Int32`) - Validate size;\n- *gte* (`Comparable`) - Check if param value is *g*reater *t*han or *e*qual (`>=`);\n- *lte* (`Comparable`) - Check if param value is *l*ess *t*han or *e*qual (`<=`);\n- *gt* (`Comparable`) - Check if param value is *g*reater *t*han (`>`);\n- *lt* (`Comparable`) - Check if param value is *l*ess *t*han (`<`);\n- *in* (`Enumerable`) - Validate if param value is included in range or array etc.;\n- *regex* (`Regex`) - Validate if param value matches regex;\n- *custom* (`Proc`) - Custom validation, see example below.\n\n```\nclass SimpleAction\n  include Prism::Params\n\n  params do\n    type name : String, validate: {\n      size:   (3..32),\n      regex:  /\\w+/,\n      custom: ->(name : String) {\n        error!(\"doesn't meet condition\") unless some_condition?(name)\n      },\n    }\n    type age : Int32?, validate: {in: (18..150)}\n  end\n\n  def self.call(context)\n    params = parse_params(context)\n  end\nend\n```","summary":"<p>A params validation module.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"error!(description)-macro","html_id":"error!(description)-macro","name":"error!","doc":"Raise `Validation::Error` with *description*.","summary":"<p>Raise <code><a href=\"../../Prism/Params/Validation/Error.html\">Validation::Error</a></code> with <em>description</em>.</p>","abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(description)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/validation.cr#L95","def":{"name":"error!","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      raise Error.new(\n{{ description }}\n)\n    \n"}}],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation/Error","path":"Prism/Params/Validation/Error.html","kind":"class","full_name":"Prism::Params::Validation::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/params/validation.cr","line_number":36,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/params/validation.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Params/Validation","kind":"module","full_name":"Prism::Params::Validation","name":"Validation"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/vladfaust/prism/Prism/ProcHandler","path":"Prism/ProcHandler.html","kind":"class","full_name":"Prism::ProcHandler","name":"ProcHandler","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/proc_handler.cr","line_number":15,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/proc_handler.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"`HTTP::Handler` which calls the *proc* on each `#call`.\n\n```\nsecret = Prism::ProcHandler.new do |handler, context|\n  if context.request.query_params.to_h[\"secret\"]?.try &.== ENV[\"SECRET\"]\n    handler.call_next(context)\n  else\n    context.response.status_code = 403\n  end\nend\n```","summary":"<p><code>HTTP::Handler</code> which calls the <em>proc</em> on each <code>#call</code>.</p>","class_methods":[],"constructors":[{"id":"new(&proc:self,HTTP::Server::Context->_)-class-method","html_id":"new(&amp;proc:self,HTTP::Server::Context-&gt;_)-class-method","name":"new","doc":"Initialize a new handler which will call *proc* on `#call`. Do not forget to call `handler.call_next(context)`.","summary":"<p>Initialize a new handler which will call <em>proc</em> on <code>#call</code>.</p>","abstract":false,"args":[],"args_string":"(&proc : self, HTTP::Server::Context -> _)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/proc_handler.cr#L21","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/proc_handler.cr#L21","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(self, HTTP::Server::Context -> _)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(&proc) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Prism/Router","path":"Prism/Router.html","kind":"class","full_name":"Prism::Router","name":"Router","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/router.cr","line_number":24,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"Routes a request's path, injecting matching `ContextProc` into `context.request.action` and path params into `context.request.path_params`.\n\nAlways calls next handler.\n\n```\nrouter = Prism::Router.new do\n  get \"/\" do |context|\n    context.response.print(\"Hello world!\")\n  end\nend\n\nserver = HTTP::Server.new(5000, [router]) do |context|\n  action.call(context) if action = context.request.action\nend\n```","summary":"<p>Routes a request's path, injecting matching <code>ContextProc</code> into <code>context.request.action</code> and path params into <code>context.request.path_params</code>.</p>","class_methods":[],"constructors":[{"id":"new(&block)-class-method","html_id":"new(&amp;block)-class-method","name":"new","doc":"Initialize a new router and yield it. You should then define routes in *&block*.\n\n```\n# The simplest router\nrouter = Prism::Router.new do\n  get \"/\" do |env|\n    env.response.print \"Hello world!\"\n  end\nend\n```","summary":"<p>Initialize a new router and yield it.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L46","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L46","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = Router.new\nwith instance yield\ninstance\n"}}],"instance_methods":[{"id":"call(context:HTTP::Server::Context)-instance-method","html_id":"call(context:HTTP::Server::Context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L52","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L52","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  path = \"/ws\" + context.request.path\n  result = lookup(path)\nelse\n  path = (\"/\" + context.request.method.downcase) + context.request.path\n  result = lookup(path)\nend\ncontext.request.action = result.payload\ncontext.request.path_params = result.params\ncall_next(context)\n"}},{"id":"delete(path,action:Action.class)-instance-method","html_id":"delete(path,action:Action.class)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  delete \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], action)"}},{"id":"delete(path,&proc:ContextProc)-instance-method","html_id":"delete(path,&amp;proc:ContextProc)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` method.\n\n```\nrouter = Prism::Router.new do\n  delete \"/bar\" do |context|\n    context.response.print(\"Hello from DELETE /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], &proc)"}},{"id":"delete(path)-instance-method","html_id":"delete(path)-instance-method","name":"delete","doc":"Draw a empty (status 200) route for *path* with `DELETE` method.\n\n```\nrouter = Prism::Router.new do\n  delete \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>DELETE</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"delete\"])"}},{"id":"get(path,&proc:ContextProc)-instance-method","html_id":"get(path,&amp;proc:ContextProc)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` method.\n\n```\nrouter = Prism::Router.new do\n  get \"/bar\" do |context|\n    context.response.print(\"Hello from GET /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"get\"], &proc)"}},{"id":"get(path,action:Action.class)-instance-method","html_id":"get(path,action:Action.class)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  get \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"get\"], action)"}},{"id":"get(path)-instance-method","html_id":"get(path)-instance-method","name":"get","doc":"Draw a empty (status 200) route for *path* with `GET` method.\n\n```\nrouter = Prism::Router.new do\n  get \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>GET</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"get\"])"}},{"id":"on(path,methods:Array(String))-instance-method","html_id":"on(path,methods:Array(String))-instance-method","name":"on","doc":"Draw a empty (status 200) route for *path* and *methods*.\n\n```\nrouter = Prism::Router.new do\n  on \"/foo\", methods: %w(get post)\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> and <em>methods</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"args_string":"(path, methods : Array(String))","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L102","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L102","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, ContextProc.new do\n  end)\nend"}},{"id":"on(path,methods:Array(String),action:Action.class)-instance-method","html_id":"on(path,methods:Array(String),action:Action.class)-instance-method","name":"on","doc":"Draw a route for *path* and *methods* calling *action*.\n\n```\nrouter = Prism::Router.new do\n  on \"/foo\", methods: %w(get post), MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, methods : Array(String), action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L89","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L89","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, ContextProc.new do |c|\n    action.call(c)\n  end.as(Node))\nend"}},{"id":"on(path,methods:Array(String),&proc:ContextProc)-instance-method","html_id":"on(path,methods:Array(String),&amp;proc:ContextProc)-instance-method","name":"on","doc":"Draw a route for *path* and *methods*.\n\n```\nrouter = Prism::Router.new do\n  on \"/foo\", methods: %w(get post) do |context|\n    context.response.print(\"Hello from #{context.request.method} /foo!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"args_string":"(path, methods : Array(String), &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L76","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L76","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, proc)\nend"}},{"id":"options(path)-instance-method","html_id":"options(path)-instance-method","name":"options","doc":"Draw a empty (status 200) route for *path* with `OPTIONS` method.\n\n```\nrouter = Prism::Router.new do\n  options \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>OPTIONS</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"options\"])"}},{"id":"options(path,action:Action.class)-instance-method","html_id":"options(path,action:Action.class)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  options \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"options\"], action)"}},{"id":"options(path,&proc:ContextProc)-instance-method","html_id":"options(path,&amp;proc:ContextProc)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` method.\n\n```\nrouter = Prism::Router.new do\n  options \"/bar\" do |context|\n    context.response.print(\"Hello from OPTIONS /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"options\"], &proc)"}},{"id":"patch(path,&proc:ContextProc)-instance-method","html_id":"patch(path,&amp;proc:ContextProc)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` method.\n\n```\nrouter = Prism::Router.new do\n  patch \"/bar\" do |context|\n    context.response.print(\"Hello from PATCH /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], &proc)"}},{"id":"patch(path,action:Action.class)-instance-method","html_id":"patch(path,action:Action.class)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  patch \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], action)"}},{"id":"patch(path)-instance-method","html_id":"patch(path)-instance-method","name":"patch","doc":"Draw a empty (status 200) route for *path* with `PATCH` method.\n\n```\nrouter = Prism::Router.new do\n  patch \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>PATCH</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"patch\"])"}},{"id":"post(path,&proc:ContextProc)-instance-method","html_id":"post(path,&amp;proc:ContextProc)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` method.\n\n```\nrouter = Prism::Router.new do\n  post \"/bar\" do |context|\n    context.response.print(\"Hello from POST /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"post\"], &proc)"}},{"id":"post(path,action:Action.class)-instance-method","html_id":"post(path,action:Action.class)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  post \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"post\"], action)"}},{"id":"post(path)-instance-method","html_id":"post(path)-instance-method","name":"post","doc":"Draw a empty (status 200) route for *path* with `POST` method.\n\n```\nrouter = Prism::Router.new do\n  post \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>POST</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"post\"])"}},{"id":"put(path)-instance-method","html_id":"put(path)-instance-method","name":"put","doc":"Draw a empty (status 200) route for *path* with `PUT` method.\n\n```\nrouter = Prism::Router.new do\n  put \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>PUT</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"put\"])"}},{"id":"put(path,action:Action.class)-instance-method","html_id":"put(path,action:Action.class)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` calling *action*.\n\n```\nrouter = Prism::Router.new do\n  put \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"put\"], action)"}},{"id":"put(path,&proc:ContextProc)-instance-method","html_id":"put(path,&amp;proc:ContextProc)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` method.\n\n```\nrouter = Prism::Router.new do\n  put \"/bar\" do |context|\n    context.response.print(\"Hello from PUT /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L108","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"put\"], &proc)"}},{"id":"ws(path,&proc:WebSocketProc)-instance-method","html_id":"ws(path,&amp;proc:WebSocketProc)-instance-method","name":"ws","doc":"Draw a WebSocket route for *path*.\n\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Prism::Router.new do\n  ws \"/foo/:bar\" do |socket, context|\n    socket.send(\"Hello WS!\")\n  end\nend\n```","summary":"<p>Draw a WebSocket route for <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : WebSocketProc)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L156","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L156","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"WebSocketProc"},"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, HTTP::WebSocketHandler.new(&proc))"}},{"id":"ws(path,channel:Channel.class)-instance-method","html_id":"ws(path,channel:Channel.class)-instance-method","name":"ws","doc":"Draw a WebSocket route for *path* instantiating *channel*.\n\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Prism::Router.new do\n  ws \"/foo/:bar\", MyChannel\nend\n```","summary":"<p>Draw a WebSocket route for <em>path</em> instantiating <em>channel</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel.class"}],"args_string":"(path, channel : Channel.class)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L169","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L169","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, WebSocketProc.new do |s, c|\n  MyChannel.call(s, c)\nend.as(Node))"}}],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/Prism/Router/DuplicateRouteError","path":"Prism/Router/DuplicateRouteError.html","kind":"class","full_name":"Prism::Router::DuplicateRouteError","name":"DuplicateRouteError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/router.cr","line_number":174,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism/Router","kind":"class","full_name":"Prism::Router","name":"Router"},"doc":"Raised if duplicate route found.","summary":"<p>Raised if duplicate route found.</p>","class_methods":[],"constructors":[{"id":"new(route)-class-method","html_id":"new(route)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":""}],"args_string":"(route)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L177","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L177","def":{"name":"new","args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(route)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"route:String-instance-method","html_id":"route:String-instance-method","name":"route","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L175","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/router.cr#L175","def":{"name":"route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@route"}}],"macros":[],"types":[]}]},{"html_id":"github.com/vladfaust/prism/Prism/Server","path":"Prism/Server.html","kind":"class","full_name":"Prism::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/server.cr","line_number":33,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Prism","kind":"module","full_name":"Prism","name":"Prism"},"doc":"A simple TCP `HTTP::Server` wrapper relying on `HTTP::Request::Action`.\n\nExample usage:\n\n```\nrequire \"prism\"\n\nrouter = Prism::Router.new do\n  get \"/\" do |env|\n    env.response.print(\"Hello world!\")\n  end\nend\n\nlog_handler = Prism::LogHandler.new(Logger.new(STDOUT))\n\nserver = Prism::Server.new([log_handler, router], name: \"My API\")\nserver.bind_tcp(5000)\nserver.listen\n\n#  INFO -- : My API is listening on http://localhost:5000\n#  INFO -- :     GET /? 200 61Î¼s\n#  INFO -- :     GET /foo? 404 166Î¼s\n#  INFO -- : My API is shutting down!\n```\n\nNOTE: You're not obligated to use `Prism::Server`, you can use standard `HTTP::Server` as well, just remember to handle `context.request.action`.","summary":"<p>A simple TCP <code>HTTP::Server</code> wrapper relying on <code>HTTP::Request::Action</code>.</p>","class_methods":[],"constructors":[{"id":"new(handlers:Array(HTTP::Handler),logger=::Logger.new(STDOUT),name=&quot;Prism::Server&quot;)-class-method","html_id":"new(handlers:Array(HTTP::Handler),logger=::Logger.new(STDOUT),name=&amp;quot;Prism::Server&amp;quot;)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Array(HTTP::Handler)"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":""},{"name":"name","doc":null,"default_value":"\"Prism::Server\"","external_name":"name","restriction":""}],"args_string":"(handlers : Array(HTTP::Handler), logger = <span class=\"t\">::</span><span class=\"t\">Logger</span>.<span class=\"k\">new</span>(<span class=\"t\">STDOUT</span>), name = <span class=\"s\">&quot;Prism::Server&quot;</span>)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr#L34","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr#L34","def":{"name":"new","args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Array(HTTP::Handler)"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":""},{"name":"name","doc":null,"default_value":"\"Prism::Server\"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(handlers, logger, name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"listen-instance-method","html_id":"listen-instance-method","name":"listen","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr#L49","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr#L49","def":{"name":"listen","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if addresses.any?\n  @logger.info((\"#{@name} is listening on \" + ((\"http://#{addresses.first}\".colorize(:light_gray)).mode(:bold)).to_s) + \"...\")\nend\nSignal::INT.trap do\n  puts(\"\\n\")\n  @logger.info(\"#{@name} is shutting down!\")\n  exit\nend\n@server.listen\n"}}],"macros":[{"id":"method_missing(call)-macro","html_id":"method_missing(call)-macro","name":"method_missing","doc":null,"summary":null,"abstract":false,"args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"args_string":"(call)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/server.cr#L66","def":{"name":"method_missing","args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      @server.\n{{ call }}\n\n    \n"}}],"types":[]}]},{"html_id":"github.com/vladfaust/prism/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/string/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/string/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['ï¿½', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param*. It basically returns `param.value.as(String)`.\n\n```\nString.from_param(<@value=\"foo\">) # => \"foo\"\n```","summary":"<p>Initialize from <em>param</em>.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/string/from_param.cr#L7","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/string/from_param.cr#L7","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen JSON::Any\n  (param.value.as(JSON::Any)).as_s? || (raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }})))\nelse\n  param.value.as(String)\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/prism/Time","path":"Time.html","kind":"struct","full_name":"Time","name":"Time","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/time/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Time` represents a date-time instant in\n[incremental time](https://www.w3.org/International/articles/definitions-time/#incremental_time)\nobserved in a specific time zone.\n\nThe calendaric calculations are based on the rules of the proleptic Gregorian\ncalendar as specified in [ISO 8601](http://xml.coverpages.org/ISO-FDIS-8601.pdf).\nLeap seconds are ignored.\n\nInternally, the time is stored as an `Int64` representing seconds from epoch\n(`0001-01-01 00:00:00.0 UTC`) and an `Int32` representing\nnanosecond-of-second with value range `0..999_999_999`.\n\nThe supported date range is `0001-01-01 00:00:00.0` to\n`9999-12-31 23:59:59.999_999_999` in any local time zone.\n\n### Telling the Time\n\nThere are several methods to retrieve a `Time` instance representing the\ncurrent time:\n\n```crystal\nTime.utc_now                                  # returns the current time in UTC\nTime.now Time::Location.load(\"Europe/Berlin\") # returns the current time in time zone Europe/Berlin\nTime.now                                      # returns the current time in current time zone\n```\n\nIt is generally recommended to keep instances in UTC and only apply a\nlocal time zone when formatting for user display, unless the domain logic\nrequires having a specific time zone (for example for calendaric operations).\n\n### Creating a Specific Instant\n\n`Time` instances representing a specific instant can be created by\n`.utc` or `.new` with the date-time specified as individual arguments:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.to_s # => 2016-02-15 10:20:30 UTC\ntime = Time.new(2016, 2, 15, 10, 20, 30, location: Time::Location.load(\"Europe/Berlin\"))\ntime.to_s # => 2016-02-15 10:20:30 +01:00 Europe/Berlin\n# The time-of-day can be omitted and defaults to midnight (start of day):\ntime = Time.utc(2016, 2, 15)\ntime.to_s # => 2016-02-15 00:00:00 UTC\n```\n\n### Retrieving Time Information\n\nEach `Time` instance allows querying calendar data:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.year        # => 2016\ntime.month       # => 2\ntime.day         # => 15\ntime.hour        # => 10\ntime.minute      # => 20\ntime.second      # => 30\ntime.millisecond # => 0\ntime.nanosecond  # => 0\ntime.day_of_week # => Time::DayOfWeek::Monday\ntime.day_of_year # => 46\ntime.monday?     # => true\ntime.time_of_day # => 10:20:30\n```\n\n### Time Zones\n\nEach time is attached to a specific time zone, represented by a `Location`\n(see `#location`).\n`#zone` returns the time zone observed in this location at the current time\n(i.e. the instant represented by this `Time`).\n`#offset` returns the offset of the current zone in seconds.\n\n```\ntime = Time.new(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime          # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime.location # => #<Time::Location Europe/Berlin>\ntime.zone     # => #<Time::Location::Zone CET +01:00 (3600s) STD>\ntime.offset   # => 3600\n```\n\nUsing `.utc`, the location is `Time::Location::UTC`:\n\n```\ntime = Time.utc(2018, 3, 8, 22, 5, 13)\ntime          # => 2018-03-08 22:05:13.0 UTC\ntime.location # => #<Time::Location UTC>\ntime.zone     # => #<Time::Location::Zone UTC +00:00 (0s) STD>\ntime.offset   # => 0\n```\n\nA `Time` instance can be transformed to a different time zone while retaining\nthe same instant using `#in`:\n\n```\ntime_de = Time.new(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime_ar = time_de.in Time::Location.load(\"America/Buenos_Aires\")\ntime_de # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime_ar # => 2018-03-08 18:05:13 -03:00 America/Buenos_Aires\n```\n\nBoth `Time` instances show a different local date-time, but they represent\nthe same date-time in the instant time-line, therefore they are considered\nequal:\n\n```\ntime_de.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_ar.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_de == time_ar # => true\n```\n\nThere are also two special methods for converting to UTC and local time zone:\n\n```\ntime.to_utc   # equals time.in(Location::UTC)\ntime.to_local # equals time.in(Location.local)\n```\n\n### Formatting and Parsing Time\n\nTo make date-time instances exchangeable between different computer systems\nor readable to humans, they are usually converted to and from a string\nrepresentation.\n\nThe method `#to_s` formats the date-time according to a specified pattern.\n\n```\ntime = Time.utc(2015, 10, 12, 10, 30, 0)\ntime.to_s(\"%Y-%m-%d %H:%M:%S %:z\") # => \"2015-10-12 10:30:00 +00:00\"\n```\n\nSimilarly, `Time.parse` is used to construct a `Time` instance from date-time\ninformation in a string, according to a specified pattern:\n\n```\nTime.parse(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\")\n```\n\nSee `Time::Format` for all directives.\n\n### Calculations\n\n```\nTime.utc(2015, 10, 10) - 5.days # => 2015-10-05 00:00:00 +00:00\n\nspan = Time.utc(2015, 10, 10) - Time.utc(2015, 9, 10)\nspan.days          # => 30\nspan.total_hours   # => 720\nspan.total_minutes # => 43200\n```\n\n## Measuring Time\n\nThe typical time representation provided by the operating system is based on\na \"wall clock\" which is subject to changes for clock synchronization.\nThis can result in discontinuous jumps in the time-line making it not\nsuitable for accurately measuring elapsed time.\n\nInstances of `Time` are focused on telling time â using a \"wall clock\".\nWhen `Time.now` is called multiple times, the difference between the\nreturned instances is not guranteed to equal to the time elapsed between\nmaking the calls; even the order of the returned `Time` instances might\nnot reflect invocation order.\n\n```\nt1 = Time.utc_now\n# operation that takes 1 minute\nt2 = Time.utc_now\nt2 - t1 # => ?\n```\n\nThe resulting `Time::Span` could be anything, even negative, if the\ncomputer's wall clock has changed between both calls.\n\nAs an alternative, the operating system also provides a monotonic clock.\nIt's time-line has no specfied starting point but is strictly linearly\nincreasing.\n\nThis monotonic clock should always be used for measuring elapsed time.\n\nA reading from this clock can be taken using `.monotonic`:\n\n```\nt1 = Time.monotonic\n# operation that takes 1 minute\nt2 = Time.monotonic\nt2 - t1 # => 1.minute (approximately)\n```\n\nThe execution time of a block can be measured using `.measure`:\n\n```\nelapsed_time = Time.measure do\n  # operation that takes 20 milliseconds\nend\nelapsed_time # => 20.milliseconds (approximately)\n```","summary":"<p><code><a href=\"Time.html\">Time</a></code> represents a date-time instant in <a href=\"https://www.w3.org/International/articles/definitions-time/#incremental_time\" target=\"_blank\">incremental time</a> observed in a specific time zone.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param*.\n\nThe param value must either represent number of milliseconds elapsed since the Unix epoch or to be `Time`.\n\n```\nTime.from_param(<@value=\"1526120573870\">) # => 2018-05-12 10:22:53 UTC\n```","summary":"<p>Initialize from <em>param</em>.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/from_param.cr#L9","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/from_param.cr#L9","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen String\n  epoch_ms((param.value.as(String)).to_i64)\nwhen Int\n  epoch_ms((param.value.as(Int)).to_i64)\nwhen Time\n  param.value\nwhen JSON::Any\n  epoch_ms((param.value.as(JSON::Any)).as_i64? || (raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))))\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/prism/Time/Span","path":"Time/Span.html","kind":"struct","full_name":"Time::Span","name":"Span","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/prism/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/time/span/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/span/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/prism/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/prism/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":"`Time::Span` represents one period of time.\n\nA `Time::Span` initializes with the specified period.\nDifferent numbers of arguments generate a `Time::Span` in different length.\nCheck all `#new` methods for details.\n\n```\nTime::Span.new(nanoseconds: 10_000) # => 00:00:00.000010000\nTime::Span.new(10, 10, 10)          # => 10:10:10\nTime::Span.new(10, 10, 10, 10)      # => 10.10:10:10\n```\n\nCalculation between `Time` also returns a `Time::Span`.\n\n```\nspan = Time.new(2015, 10, 10) - Time.new(2015, 9, 10)\nspan       # => 30.00:00:00\nspan.class # => Time::Span\n```\n\nInspection:\n\n```\nspan = Time::Span.new(20, 10, 10)\nspan.hours   # => 20\nspan.minutes # => 10\nspan.seconds # => 10\n```\n\nCalculation:\n\n```\na = Time::Span.new(20, 10, 10)\nb = Time::Span.new(10, 10, 10)\nc = a - b # => 10:00:00\nc.hours   # => 10\n```\n","summary":"<p><code><a href=\"../Time/Span.html\">Time::Span</a></code> represents one period of time.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param*.\n\nThe param value must either represent a number of nanoseconds (1 billionth of second) or to be `Time::Span` itself.\n\n```\nTime::Span.from_param(<@value=\"500\">) # => 00:00:00.000000500\n```","summary":"<p>Initialize from <em>param</em>.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/span/from_param.cr#L9","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/time/span/from_param.cr#L9","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case param.value\nwhen String\n  new(nanoseconds: (param.value.as(String)).to_i64)\nwhen Int\n  new(nanoseconds: (param.value.as(Int)).to_i64)\nwhen Time::Span\n  param.value\nwhen JSON::Any\n  new(nanoseconds: param.value.as_i64? || (raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))))\nelse\n  raise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/vladfaust/prism/Union","path":"Union.html","kind":"struct","full_name":"Union(*T)","name":"Union","abstract":false,"superclass":{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/vladfaust/prism/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/prism/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"prism/ext/union/from_param.cr","line_number":1,"url":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/union/from_param.cr"}],"repository_name":"github.com/vladfaust/prism","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A union type represents the possibility of a variable or an expression\nhaving more than one possible type at compile time.\n\nWhen invoking a method on a union type, the language checks that the\nmethod exists and can be resolved (typed) for each type in the union.\nFor this reason, adding instance methods to `Union` makes no sense and\nhas no effect. However, adding class method to `Union` is possible\nand can be useful. One example is parsing `JSON` into one of many\npossible types.\n\nUnion is special in that it is a generic type but instantiating it\nmight not return a union type:\n\n```\nUnion(Int32 | String)      # => (Int32 | String)\nUnion(Int32)               # => Int32\nUnion(Int32, Int32, Int32) # => Int32\n```","summary":"<p>A union type represents the possibility of a variable or an expression having more than one possible type at compile time.</p>","class_methods":[{"id":"from_param(param:Prism::Params::AbstractParam)-class-method","html_id":"from_param(param:Prism::Params::AbstractParam)-class-method","name":"from_param","doc":"Initialize from *param* value.\n\n`.from_param` casting is attempted on each union type unless found suitable.\n\nNOTE: Types are iterated alphabetically, so `UInt8 | Null` would turn to `Null | UInt8`. That's why `Int32 | String` won't work, it will always return `String`.","summary":"<p>Initialize from <em>param</em> value.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"args_string":"(param : Prism::Params::AbstractParam)","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/union/from_param.cr#L7","source_link":"https://github.com/vladfaust/prism/blob/606bba14fe6ce16e49591f1077bc194c05c74ff7/src/prism/ext/union/from_param.cr#L7","def":{"name":"from_param","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":"Prism::Params::AbstractParam"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = ({% for t in T %}\n        begin\n          return {{ t.id }}.from_param(param).as(self)\n        rescue Prism::Params::InvalidParamTypeError | ArgumentError\n        end\n      {% end %})\nraise(Prism::Params::InvalidParamTypeError.new(param, {{ @type.id.stringify }}))\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}})